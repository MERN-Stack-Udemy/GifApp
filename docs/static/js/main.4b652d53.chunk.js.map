{"version":3,"sources":["components/AddCategorie.js","Helpers/getGifs.js","components/GifsGridItem.js","components/GifsGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategorie","setCategories","useState","inputvalue","setInputvalue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","categorie","a","url","encodeURI","fetch","resp","json","data","gifs","map","gifData","id","image","images","downsized_medium","title","GifsGridItem","className","src","alt","GifsGrid","category","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAgBjD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAe,MAKjB,SACE,uBACEO,KAAO,OACPC,MAAST,EACTU,SAjBe,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,a,+BCTdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAKD,EAAQC,GACbC,MAAQF,EAAQG,OAAOC,iBACvBC,MAAQL,EAAQK,UAVC,kBAadP,GAbc,4CAAH,sDCEPQ,EAAe,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,MAAOG,EAAY,EAAZA,MAEpC,OACE,sBAAKE,UAAU,yBAAf,UACE,qBACEC,IAAKN,EAAMV,IACXiB,IAAMJ,IAER,4BAAIA,QCLGK,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAc,IAAD,EACdnC,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WACR1B,EAAQsB,GACLK,MAAK,SAACC,GAELH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGd,CAACD,IAEGE,EDdiBK,CAAaP,GAA9Bd,EAFiC,EAEjCA,KAAMe,EAF2B,EAE3BA,QAEb,OACE,qCACE,oBAAKL,UAAW,iBAAhB,SAAkCI,IAChCC,GAAW,4CACb,qBAAKL,UAAU,YAAf,SACGV,EAAKE,KAAK,SAACoB,GAAD,OACT,cAAC,EAAD,eAEMA,GADGA,EAAIlB,aEgBRmB,EA5BM,WAAO,IAAD,EAEW5C,mBAAS,CAAC,cAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CACEA,cAAkBA,IAGpB,uBAEA,6BACES,EAAWe,KAAK,SAAET,GAAF,OAEd,aADA,CACC,EAAD,CAGEqB,SAAYrB,GAFPA,YCfjB+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4b652d53.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategorie = ( {setCategories} ) => {\n\n  const [inputvalue, setInputvalue] = useState(''); // ''\n\n  const handleChange = (e) => {\n    setInputvalue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputvalue.trim().length > 2){\n      setCategories(categories => [inputvalue, ...categories ])\n      setInputvalue( \"\" );\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type = \"text\" \n        value = {inputvalue} \n        onChange = {handleChange} />\n    </form>\n  );\n\n};\n\nAddCategorie.propTypes = {\n  setCategories : PropTypes.func.isRequired,\n}\n","export const getGifs = async (categorie) => {\n    \n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categorie)}&limit=10&api_key=Wesx83VgWYMxRB57tCmyW4SvjO0wXj28`;\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n  \n  const gifs = data.map( gifData => {\n    return {\n      id : gifData.id,\n      image : gifData.images.downsized_medium,\n      title : gifData.title\n    }\n  })\n  return gifs;\n}","import React from 'react'\n\nexport const GifsGridItem = ( {image, title} ) => {\n  \n  return (\n    <div className=\"card animate__bounceIn\">\n      <img \n        src={image.url}\n        alt= {title}\n      />\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { useFetchGifs } from '../Hooks/useFetchGifs'\nimport { GifsGridItem } from './GifsGridItem';\n\nexport const GifsGrid = ({ category }) => {\n\n  const {data, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3  className= \"animate__jello\">{category}</h3>\n      { loading && <p>Loading....</p>}\n      <div className=\"card-grid\">\n        {data.map( (img) => (\n          <GifsGridItem \n            key = {img.id} \n            {...img}\n          />\n        ))}\n        \n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\";\n\nimport { getGifs } from \"../Helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then((imgs) => {\n      \n        setState({\n          data: imgs,\n          loading: false,\n        });\n    });\n  }, [category]); // categorie\n\n  return state;\n};\n","import React, { useState } from 'react'\nimport { AddCategorie } from './components/AddCategorie';\nimport { GifsGrid } from './components/GifsGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n  \n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategorie \n        setCategories = { setCategories }\n      />\n\n      <hr/>\n\n      <ol>{\n        categories.map( ( categorie ) => (\n          // return <li key={categorie}> {categorie}</li>\n          <GifsGrid \n            key={categorie}\n            // class\n            category= { categorie }\n          />\n        ))\n      }</ol>\n      \n    </>\n  )\n\n}\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}